/*
 Copyright (C) 2017 Baz2473
 Name: Area Occupancy Child App
 */

public static String areaOccupancyChildAppVersion() {
    return "v12.1.0.0"
}

// 10.1.0.0 added 4 button options for automation and on and off
// 10.1.0.1 added automation checks
// 10.1.0.2 changed from asking child for automation state every time to using state and setting only once then only changing when needed.
// 10.1.0.3 fixed checkForOccupancy...
// 10.1.0.4 added unschedules to automation off nutton press and turnAllOff function
// 10.1.0.5 moved the unschedules around to try and better speed up things and only unschedule when needed. also added a ferw returns in places where needed!
// 10.1.0.6 changed the lights turnong on function to a seperate def
// 10.1.0.7 added def child to checkforoccupancy event
// 10.1.0.8 changed automationstate to atomic state for instant function
// 10.1.0.9 reintroduced turning automation on again if alarm sets... and double checked all state.automation on is now atomic.
// 10.2.0.0 arranged everything in alph order and introduced automation event checks and rearm regardless function & after no motion
// 11.0.0.0 Removed all 'def child' & 'def areaState' references and replaced with a private call earlier
// 11.0.0.1 Added option for including speakers in a follow mw function
// 12.0.0.0 Reverted back to calling child before needed as realised it was slowing down the lights turning on...
// 12.1.0.0 Replaced the getArea() function with the return value to hopefully speed things up a milisecond or two!



definition    (
    name: "Area Occupancy Child App",
    namespace: "Baz2473",
    parent: "Baz2473:Area Occupancy",
    author: "Baz2473",
    description: "This is a ported version for HUBITAT!!!",
    category: "My Apps",
    iconUrl: "",
    iconX2Url: "",
    iconX3Url: ""
)

preferences {
    page(name: "areaName")
}



def areaName() {
    dynamicPage(name: "areaName", title: "A New Device Will Be Created With This Name!", install: true, uninstall: childCreated()) {
        if (!childCreated()) {
            section {
                label title: "What Name?\n(Required):", required: true,  submitOnChange: true
            }
        } else {
            section {
                paragraph "Area Name:\n${app.label}"
            }
        }
        
        section("Select the Entry motion sensors in '$app.label'") {
            input "entryMotionSensors", "capability.motionSensor", title: "Entry sensors?", required: false, multiple: true, submitOnChange: true
        }
            if (entryMotionSensors) {
                section("Select the Exit motion sensors 'Outside' $app.label") {
                    input "exitMotionSensors", "capability.motionSensor", title: "Exit sensors?", required: true, multiple: true, submitOnChange: true
               	    }
                }
            if (exitMotionSensors) {
                section("Select if $app.label has a door to monitor?") {
                    input "monitoredDoor", "bool", title: "Monitor a door?", defaultValue: false, submitOnChange: true
                    if (monitoredDoor) {
                        input "doors", "capability.contactSensor", title: "Door?", multiple: false, required: true, submitOnChange: true
                        if (doors) {
                            input "immediateExitSensor", "capability.motionSensor", title: "$app.label's immediate exit sensor", multiple: false, required: true, submitOnChange: true
                            input "actionOnDoorOpening", "bool", title: "Turn 'ON' something when\n$doors opens?", defaultValue: false, submitOnChange: true
                            if (actionOnDoorOpening) {
                                input "onlyIfAreaVacant", "bool", title: "But only if $app.label is vacant", defaultValue: true, submitOnChnage: true
                                input "doorOpeningAction", "capability.switchLevel", title: "Turn on?", multiple: true, required: true, submitOnChange: true
                                input "setLevelAt", "number", title: "Set level to? %", required: true, multiple: false, range: "1..100", submitOnChange: true, defaultValue: null
                                input "anotherAction", "bool", title: "Another action?", defaultValue: false, submitOnChange: true
                                        if (anotherAction) {
                                            input "onlyIfASensorIsActive", "bool", title: "But only if a sensor is active?", defaultValue: false, submitOnChange: true
                                            if (onlyIfASensorIsActive) {
                                                input "onlyIfThisSensorIsActive", "capability.motionSensor", title: "Only if this sensor is active!", multiple: true, required: true
                                            	}
                                            input "onlyIfAreaVacant2", "bool", title: "But only if $app.label is vacant", defaultValue: false, submitOnChnage: true
                                            input "doorOpeningAction2", "capability.switchLevel", title: "Turn on?", multiple: true, required: true, submitOnChange: true
                                            input "setLevelAt2", "number", title: "Set Level To? %", required: true, multiple: false, range: "1..100", submitOnChange: true
                                            input "turnOffAfter", "bool", title: "Turn off after a set amount of time?", defaultValue: false, submitOnChange: true
                                            if (turnOffAfter) {
                                                input "offAfter", "number", title: "After ? Seconds", required: true, submitOnChange: true, defaultValue: null
                                            	}
                                        	}
                                input "actionOnDoorClosing", "bool", title: "Turn off when\n$doors closes?", defaultValue: false, submitOnChange: true    
                            	}                                
                            }
                        }
                    }
                }
        

           if (exitMotionSensors) {
               section("Do you want 'Any' lights\nTo automatically turn 'ON'\nVia MOTION?") {
                        input "switchOnControl", "bool", title: "OCCUPIED 'ON' Control?", defaultValue: false, submitOnChange: true
                	   }
           }
           if (exitMotionSensors && switchOnControl) {
               section("Turn ON which lights\nwhen '$app.label' changes to 'OCCUPIED'") {
                        input "dimmableSwitches1", "capability.switchLevel", title: "Lights?", required: true, multiple: true, submitOnChange: true
                        if (dimmableSwitches1) {
                            input "setLevelTo", "number", title: "Set level to %", required: true, multiple: false, range: "1..100", submitOnChange: true, defaultValue: null
                        }
               }
           }
           if (exitMotionSensors) {
               section("Do you want any lights\nto automatically turn 'OFF'?") {
                        input "offRequired", "bool", title: "VACANT 'OFF' Control?", defaultValue: false, submitOnChange: true
               }
           }
           if (offRequired) {
               section("Turn OFF which lights\nafter $app.label changes to 'VACANT'") {
                        input "switches2", "capability.switchLevel", title: "Lights?", required: true, multiple: true, submitOnChange: true
                        if (switches2) {
                            input "startInXseconds","number", title: "Start the dim\nafter how many seconds?", required: true, range: "60..3600", submitOnChange: true, defualtValue: 60
                            input "dimByLevel", "number", title: "Reduce level by %\nbefore turning off!", required: true, range: "1..99", submitOnChange: true, defaultValue: 50
                            input "DimInXseconds","number", title: "Turn off\nafter how many seconds?", required: true, range: "60..600", submitOnChange: true, defualtValue: 60
                            input "checkForOccupancyInXseconds","number", title: "Run an extra occupancy check \nafter how many minutes?", required: true, range: "1..30", submitOnChange: true, defaultValue: 5
                        }
               }
           }
            if (exitMotionSensors) {
                section("Do You Want To Automatically Switch\n$app.label's Automation 'ON' If It Was Disabled\nWhen Activation Of Certain Modes Occur?") {
                    input "resetAutomationOnAwayMode", "bool", title: "Reset Automation On Mode Selection?", defaultValue: false, submitOnChange: true
                    if (resetAutomationOnAwayMode) {
                        input "resetAutomationMode", "mode", title: "Select Your Automation Reset Modes?", required: true, multiple: true, submitOnChange: true
                    	}
                    }
                }
        if (exitMotionSensors) {
                section("Do You Want To Automatically Switch\n$app.label's Automation 'ON' If It Stays Disabled\nFor A Certain Amount Of Time?") {
                    input "autoAutomationRearm", "bool", title: "Reset Automation After Time?", defaultValue: false, submitOnChange: true
                    if (autoAutomationRearm) {
                        input "resetAutomationTime", "number", title: "After How Many Minutes?", required: true, multiple: false, submitOnChange: true
                        input "onlyAfterNoMovement", "bool", title: "Only After 'NO Motion' for $resetAutomationTime Minutes", required: false, defaultValue: false, submitOnChange: true
                    	}
                    }
                }

            if (exitMotionSensors) {
                section("Do You Require Switching $app.label To 'VACANT'\nOn Activation Of Your Away Modes") {
                    input "awayModeActivatesVacant", "bool", title: "Auto Vacate When\nYour Away Modes Activate?", defaultValue: false, submitOnChange: true
                    if (awayModeActivatesVacant) {
                        input "awayModes", "mode", title: "Select Your Away Modes?", required: true, multiple: true, submitOnChange: true
                    	}
                    }
                }
	    if (exitMotionSensors) {
                section("Do You Require Switching $app.label To 'VACANT'\nIf Any Persons Presence Changes To Away?") {
                    input "presence", "bool", title: "Auto Vacate On\nAny Presence Change?", defaultValue: false, submitOnChange: true
                    if (presence) {
                        input "presenceSensors", "capability.presenceSensor", title: "Select Who? Leaving\nWill Activate 'VACANT'", required: true, multiple: true, submitOnChange: true
                    	}
                    }
                }
            if (entryMotionSensors && doors) {
                section("Action On Engaged") {
                	input "movementDetectedWhileDoorClosedActivatesEngaged", "bool", title: "Make $app.label ENGAGED\nif movement is detected while the door is closed?", defaultValue: false, submitOnChange: true
                    input "actionOnEngaged", "bool", title: "Turn ON Something When\n$app.label Changes To Engaged?", defaultValue: false, submitOnChange: true
                    if (actionOnEngaged) {
                        input "engagedAction", "capability.switch", title: "Turn On?", multiple: true, required: true, submitOnChange: true
                    	}
                	}
            	}
            if (entryMotionSensors) {
                section("Action On Vacant") {
                    input "actionOnVacant", "bool", title: "Turn OFF Something When\n$app.label Changes To Vacant?", defaultValue: false, submitOnChange: true
                    if (actionOnVacant) {
                        input "vacantAction", "capability.switch", title: "Turn Off?", multiple: true, required: true, submitOnChange: true
                    	}
                	}
                             
                section("Select ALL Of The Lights That Are In $app.label?") {
                    input "checkableLights", "capability.switch", title: "Lights?", required: true, multiple: true
                	}
                
                section("Select $app.label\nin the drop down list \nfor HUBITAT button operations & Automation Re-arm Function") {
                    input "area", "capability.pushableButton", title: "Area Name?", required: true, multiple: false, submitOnChange: true
                	}
                
                section("Does $app.label have any speakers in it\nWhich you would like to include in\n'Follow Me Mode'?") {
                    input "speakersInThisRoom", "bool", title: "Speakers?", required: true, multiple: false, submitOnChange: true
                    if (speakersInThisRoom) {
                        input "speakers", "capability.switch", title: "Speakers?", required: true, multiple: true, submitOnChange: true
                        if (speakers) {
                            input "followMeSwitch", "capability.switch", title: "What is the name of your follow me switch?", required: true, multiple: false, submitOnChange: true
                            input "otherAreaMustBeVacant", "bool", title: "Do you need to check another area\nbefore turning off the speakers?", required: false, multiple: false, submitOnChange: true
                            if (otherAreaMustBeVacant) {
                                input "otherVacantArea", "capability.pushableButton", title: "What other area must be vacant too?", required: true, multiple: false, submitOnChange: true
                            }
                        }
                    }
                }
            }
        	}
    }

def installed() {}
def updated() {
    unsubscribe()
    initialize()
    
    if (!childCreated()) {
        spawnChildDevice(app.label)
    }
    if (awayModeActivatesVacant || resetAutomationOnAwayMode) {
        subscribe(location, modeEventHandler)
    }
    if (checkableLights) {
        subscribe(checkableLights, "switch.on", checkableLightsSwitchedOnEventHandler)
        subscribe(checkableLights, "switch.off", checkableLightsSwitchedOffEventHandler)
    }
    if (doors) {
        subscribe(doors, "contact.open", monitoredDoorOpenedEventHandler)
        subscribe(doors, "contact.closed", monitoredDoorClosedEventHandler)
        subscribe(immediateExitSensor, "motion.inactive", immediateExitMotionInactiveEventHandler)
    }
    if (entryMotionSensors) {      
        subscribe(entryMotionSensors, "motion.active", entryMotionActiveEventHandler)
        subscribe(entryMotionSensors, "motion.inactive", entryMotionInactiveEventHandler)
    }
    if (presence) {
        subscribe(presenceSensors, "presence.not present", presenceAwayEventHandler)
   	} 
    if (area) {
        subscribe(area, "pushed.1", button1EventHandler)
    	subscribe(area, "pushed.2", button2EventHandler)
        subscribe(area, "pushed.3", button3EventHandler)
        subscribe(area, "pushed.4", button4EventHandler)
        if (autoAutomationRearm) {
            subscribe(area, "automationoff", automationOffEvtHandler)
            subscribe(area, "automationon", automationOnEvtHandler)
        }
    }
    atomicState.automationRequired = true
}

def initialize() {}
def uninstalled() {
    getChildDevices().each {
                           deleteChildDevice(it.deviceNetworkId)
    }
}

//private getArea() {
  //  return "aa_${app.id}"
//}

private childCreated() {
    if (getChildDevice("aa_${app.id}"))
        return true
    else
        return false
}
def childUninstalled() {
    log.trace "${app.label} Has Been Uninstalled!"
}    
def spawnChildDevice(areaName) {
    app.updateLabel(app.label)
    if (!childCreated())
    def child = addChildDevice("Baz2473", "Area Occupancy Status", "aa_${app.id}", null, [name: "aa_${app.id}", label: areaName, completedSetup: true])
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


def automationOffEvtHandler(evt) {
    atomicState.automationRequired = false
    if (autoAutomationRearm && area && !onlyAfterNoMovement) {
        runIn(resetAutomationTime * 60, returnAutomationToOn)
    }
}

def automationOnEvtHandler(evt) {
    atomicState.automationRequired = true
    unsubscribe(returnAutomationToOn)
}

def button1EventHandler(evt) {
    atomicState.automationRequired = true
    def child = getChildDevice("aa_${app.id}")
	child.generateAutomationEvent('automationon')
}

def button2EventHandler(evt) {
    atomicState.automationRequired = false
    def child = getChildDevice("aa_${app.id}")
	child.generateAutomationEvent('automationoff')
    unschedule(dimNow) 
    unschedule(turnOffNow) 
    unschedule(checkForOccupancy)
}

def button3EventHandler(evt) {
    turnon()
}

def button4EventHandler(evt) {
    turnalloff()
}

def checkableLightsSwitchedOnEventHandler(evt) {
    def child = getChildDevice("aa_${app.id}")
    def areaState = child.getAreaState()
    if (['vacant','vacantdimmed','vacantclosed','vacantdimmedclosed'].contains(areaState)) {
          if (doors) { 
        	  if (doors.currentContact.contains("closed")) { 
            	  child.generateEvent("vacantonclosed")
              } else { 
              		 child.generateEvent("vacanton")
              }
          } else { 
          	     child.generateEvent('vacanton')
          }
    } else if (['occupied'].contains(areaState)) {
                 child.generateEvent('occupiedon')
           } else if (['occupiedmotion'].contains(areaState)) {
                        child.generateEvent('occupiedonmotion')
   		  		  } else if (['engaged'].contains(areaState)) {
       				  		   child.generateEvent('engagedon')
   				 		 } else if (['engagedmotion'].contains(areaState)) {
     				   			      child.generateEvent('engagedonmotion')
   			 	  			    } else if (['checking'].contains(areaState)) {
       						     			 child.generateEvent('checkingon')
   			   		    			   } else if (['donotdisturb'].contains(areaState)) {
       											    child.generateEvent('donotdisturbon')
    										  }
}

def checkableLightsSwitchedOffEventHandler(evt) {
    def checkableLightsState = checkableLights.currentSwitch
    def child = getChildDevice("aa_${app.id}")
    def areaState = child.getAreaState()
    if (['vacanton','vacantdimmed','vacantonclosed','vacantdimmedclosed'].contains(areaState) && !checkableLightsState.value.contains("on")) {
    	  if (doors) { 
        	  if (doors.currentContact.contains("closed")) { 
             	  child.generateEvent("vacantclosed")
              } else { 
              	     child.generateEvent("vacant")
              }
          } else { 
       	  	     child.generateEvent('vacant')
          }
    } else if (['occupiedon'].contains(areaState) && !checkableLightsState.value.contains("on")) {
        	     child.generateEvent('occupied')
   		   } else if (['occupiedonmotion'].contains(areaState) && !checkableLightsState.value.contains("on")) {
       				    child.generateEvent('occupiedmotion')
    		      } else if (['engagedon'].contains(areaState) && !checkableLightsState.value.contains("on")) {
       	   	   	 	 	       child.generateEvent('engaged')
   			  			 } else if (['engagedonmotion'].contains(areaState) && !checkableLightsState.value.contains("on")) {
      				  			      child.generateEvent('engagedmotion')
    						    } else if (['checkingon'].contains(areaState) && !checkableLightsState.value.contains("on")) {
       							    	     child.generateEvent('checking')
   						   		       } else if (['donotdisturbon'].contains(areaState) && !checkableLightsState.value.contains("on")) {
       					   		   			        child.generateEvent('donotdisturb')
   							    			  }
}
  
def checkForOccupancy() {
    if (atomicState.automationRequired && (!entryMotionSensors.currentMotion.contains("active"))) {
    def child = getChildDevice("aa_${app.id}")
        child.generateEvent('vacanton')
        dimNow()
    }
}

def dimNow() {
    if (atomicState.automationRequired) {
	    switches2.each {
       				   def currentLevel = it.currentValue("level")
      				   if (currentLevel > dimByLevel) {
            			   def newLevel = (currentLevel - dimByLevel)
            		       it.setLevel(newLevel)
        	           }
        } 
     runIn(DimInXseconds, turnOffNow)
    }
}

def doaoff() {
    if (atomicState.automationRequired) {
        doorOpeningAction2.each {
                                it.setLevel(0)
                                it.off()
        }
    }
} 

def engaged() {
    def child = getChildDevice("aa_${app.id}")
    if (checkableLights.currentSwitch.contains("on")) {
        child.generateEvent('engagedonmotion')
    } else {
           child.generateEvent('engagedmotion')
           if (atomicState.automationRequired && switchOnControl && dimmableSwitches1) {
               dimmableSwitches1.each {
                   			          it.setLevel(setLevelTo)
               }
           }
    }
    if (atomicState.automationRequired && actionOnEngaged) {
        engagedAction.on()
    }
    if (onlyAfterNoMovement && autoAutomationRearm && area) {
        unsubscribe(returnAutomationToOn)
    }
}

def entryMotionActiveEventHandler(evt) {
    def child = getChildDevice("aa_${app.id}")
    def areaState = child.getAreaState()
    if (movementDetectedWhileDoorClosedActivatesEngaged) {
        if (doors.currentContact.contains("closed") && !['engaged','engagedon','engagedonmotion'].contains(areaState)) {
            unschedule(dimNow) 
            unschedule(turnOffNow) 
            unschedule(checkForOccupancy)
            engaged()
            return
       	}
    }
    if (['occupiedon','vacanton'].contains(areaState)) {
          child.generateEvent('occupiedonmotion')
          unschedule(dimNow) 
          unschedule(turnOffNow) 
          unschedule(checkForOccupancy)
          turnOnLightsCheck()
          return
    }
    if (['occupied','vacant'].contains(areaState)) {
          if (checkableLights.currentSwitch.contains("on")) {
              child.generateEvent('occupiedonmotion')
              turnOnLightsCheck()
          } else {
                 child.generateEvent('occupiedmotion')
                 turnOnLightsCheck()
          }
          return
    }
    if (['engagedon'].contains(areaState)) {
          child.generateEvent('engagedonmotion')
          turnOnLightsCheck()
          return
    }
    if (['engaged'].contains(areaState)) {
          if (checkableLights.currentSwitch.contains("on")) {
              child.generateEvent('engagedonmotion')
              turnOnLightsCheck()
          } else {
                 child.generateEvent('engagedmotion')
                 turnOnLightsCheck()
          }
          return
     }
}

def entryMotionInactiveEventHandler(evt) {
    def exitMotionState = exitMotionSensors.currentMotion
    def entryMotionState = entryMotionSensors.currentMotion
    if (!atomicState.automationRequired && onlyAfterNoMovement && autoAutomationRearm && area) {
         runIn(resetAutomationTime * 60, returnAutomationToOn)
    }
    	if (!entryMotionState.contains("active")) {
             def child = getChildDevice("aa_${app.id}")
             def areaState = child.getAreaState()
       	     if (['occupiedmotion'].contains(areaState)) {
        	  	   if (exitMotionState.contains("active")) {
                       child.generateEvent('vacant')
                       turnOffFollowMeSpeakersCheck()
                  	   return
             	   } else {
                     	  child.generateEvent('occupied')
                     	  return
              	   }
             }
             if (['checking'].contains(areaState)) {
                   child.generateEvent('vacantclosed')
                   turnOffFollowMeSpeakersCheck()
                   return
             }
             if (['engagedonmotion'].contains(areaState)) {
                   child.generateEvent('engagedon')
                   return
             }
             if (['engagedmotion'].contains(areaState)) {
                   child.generateEvent('engaged')
                   return
             }
             if (['occupiedonmotion'].contains(areaState)) {
                   if (exitMotionState.contains("active")) {
                       child.generateEvent('vacanton')
                       runIn(startInXseconds, dimNow)
                       return
                   } else {
                          child.generateEvent('occupiedon')
                          runIn((checkForOccupancyInXseconds * 60), checkForOccupancy)
                          return
                   }
             }
             if (['checkingon'].contains(areaState)) {            
                   child.generateEvent('vacantonclosed')
                   runIn(startInXseconds, dimNow)
                   return
             }
        }
}

def immediateExitMotionInactiveEventHandler(evt) {
    if (movementDetectedWhileDoorClosedActivatesEngaged) {
    	if (entryMotionSensors.currentMotion.contains("active") && doors.currentContact.contains("closed")) {
            engaged()
    	}
    }
}

def modeEventHandler(evt) {
    if (resetAutomationOnAwayMode && resetAutomationMode && resetAutomationMode.contains(evt.value) && !atomicState.automationRequired) {
        def child = getChildDevice("aa_${app.id}")
        child.generateAutomationEvent('automationon')
        atomicState.automationRequired = true
        turnalloff()
    }
    if (awayModeActivatesVacant && awayModes && awayModes.contains(evt.value)) {
        turnalloff()
    }
}

def monitoredDoorOpenedAction() {
    if (atomicState.automationRequired) {
        doorOpeningAction.each {
        		    		   it.setLevel(setLevelAt)
        }
    }
} 

def monitoredDoorOpenedAction2() {
    if (atomicState.automationRequired) {
        doorOpeningAction2.each {
        				    	it.setLevel(setLevelAt2)
        }
    }
}

def monitoredDoorOpenedEventHandler(evt) {
    def child = getChildDevice("aa_${app.id}")
    def areaState = child.getAreaState()
    if (['vacantclosed'].contains(areaState)) {
    	  child.generateEvent('vacant')
    }
    if (['vacantonclosed'].contains(areaState)) {
    	  child.generateEvent('vacanton')
    }
    if (['checking','checkingon','engaged','engagedmotion','engagedon','engagedonmotion'].contains(areaState)) {
    	  if (actionOnVacant) {
        	  if (['engaged','engagedon','engagedmotion','engagedonmotion'].contains(areaState)) {
            	    vacantAction.off()
        	  }
    	  }
   	      if (checkableLights.currentSwitch.contains("on")) {
       	      child.generateEvent('occupiedonmotion')
    	  } else {
       		     child.generateEvent('occupiedmotion')
          }
    }   
    if (actionOnDoorOpening) {
        if (atomicState.automationRequired) {
            if (onlyIfAreaVacant) {
                if (['vacant','vacantclosed'].contains(areaState)) {
                      monitoredDoorOpenedAction()
                }
            } else {
                   monitoredDoorOpenedAction()
            }
            if (onlyIfThisSensorIsActive) {
                if (onlyIfThisSensorIsActive.currentMotion.contains("active")) {
                    if (onlyIfAreaVacant2) {
                       	if (['vacant','vacantclosed'].contains(areaState)) {
                              monitoredDoorOpenedAction2()
                        }
                    } else {
                           monitoredDoorOpenedAction2()
                    }
                } 
            } else {
                   if (onlyIfAreaVacant2) {
                       if (['vacant','vacantclosed'].contains(areaState)) {
                             monitoredDoorOpenedAction2()
                       }
                   } else {
                          monitoredDoorOpenedAction2()
                   }
            }
        }
    }
}
 
def monitoredDoorClosedEventHandler(evt) {
    def child = getChildDevice("aa_${app.id}")
    def areaState = child.getAreaState()
    if (['vacant'].contains(areaState)) {
          child.generateEvent('vacantclosed')
    }
    if (['vacanton'].contains(areaState)) {
          child.generateEvent('vacantonclosed')
    }
  	if (['occupiedmotion'].contains(areaState)) {
   	      child.generateEvent('checking')
    }
   	if (['occupiedonmotion'].contains(areaState)) {
   	      child.generateEvent('checkingon')
    }
    if (atomicState.automationRequired) {
        if (turnOffAfter) {
            runIn(offAfter, doaoff, [overwrite: false])
        }
        if (actionOnDoorClosing) {
            doorOpeningAction.each {
          			               it.setLevel(0)
            }
       	}
    }
}

def presenceAwayEventHandler(evt) {
	turnalloff()
    def child = getChildDevice("aa_${app.id}")
    child.generateAutomationEvent('automationon')
}

def returnAutomationToOn() {
    if (!atomicState.automationRequired) {
         def child = getChildDevice("aa_${app.id}")
         child.generateAutomationEvent('automationon')
         atomicState.automationRequired = true
         turnalloff() 
    }
}

def turnalloff() {
    if (!entryMotionSensors.currentMotion.contains("active")) {
         unschedule(dimNow) 
         unschedule(turnOffNow) 
         unschedule(checkForOccupancy)
     	 checkableLights.each {
                			  if (it.hasCommand("setLevel")) {
                      	          it.setLevel(0)
                              } else {
               				          it.off()
                              }
         }
         def child = getChildDevice("aa_${app.id}")
         if (doors) {
             if (doors.currentContact.contains("closed")) {
                 child.generateEvent('vacantclosed')
             } else {
                    child.generateEvent('vacant')
             }
    	 } else {
              	child.generateEvent('vacant')
		 }
    }
}

def turnOffNow() {
    if (atomicState.automationRequired) {
        switches2.each {
      			       if (it.hasCommand("setLevel")) {
                	       it.setLevel(0)
            		   } else {
                		      it.off()
            		   }
         }
    }
    turnOffFollowMeSpeakersCheck()
}

def turnon() {
    checkableLights.each {
      			         if (it.hasCommand("setLevel")) {
                	         it.setLevel(75)
            	         } else {
                	            it.on()
            		     }
    }
}

def turnOnLightsCheck() {
    if (atomicState.automationRequired && switchOnControl && dimmableSwitches1) {
        dimmableSwitches1.each {
      					       if ((it.currentLevel < setLevelTo) || (it.currentSwitch.contains("off"))) {
                   			        it.setLevel(setLevelTo)
        				       }
        }
    }
    turnOnFollowMeSpeakersCheck()
    if (!atomicState.automationRequired && onlyAfterNoMovement && autoAutomationRearm && area) {
         unsubscribe(returnAutomationToOn)
    }
}

def turnOnFollowMeSpeakersCheck() {
    if (speakersInThisRoom && speakers && atomicState.automationRequired) {
        if (followMeSwitch.currentSwitch.contains("on")) {
            speakers.each {
                          if (it.currentSwitch.contains("off")) {
                              it.on()
                          }
            }
        }  
    } 
}

def turnOffFollowMeSpeakersCheck() {
    if (speakersInThisRoom && speakers && atomicState.automationRequired) {
        if (followMeSwitch.currentSwitch.contains("on")) {
            if (otherAreaMustBeVacant && otherVacantArea) {
                def otherVacantArea = otherVacantArea.currentState("occupancyStatus")
                if (otherVacantArea.value.contains('vacant') || otherVacantArea.value.contains('vacantclosed')) {
                    speakers.each {
                                  if (it.currentSwitch.contains("on")) {
                                      it.off()
                                  }
                    }
                }
            } else {
                    speakers.each {
                                  if (it.currentSwitch.contains("on")) {
                                      it.off()
                                  }
                    }
            }
        }  
    } 
}




